from ecobot_questions import questions
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import telebot
import random

bot = telebot.TeleBot("tutifruti")

user_data = {}

def gen_markup(question):
    markup = InlineKeyboardMarkup()
    for option in question["options"]:
        markup.add(InlineKeyboardButton(option, callback_data=option))
    return markup

@bot.message_handler(commands=["start"])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –≠–ö–û-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /victorina, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üåç")

@bot.message_handler(commands=["victorina"])
def send_victorina(message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "lives": 3,
        "strike": 0,
        "answered": [],
        "current_question": None
    }

    bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞–µ–º –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –£ —Ç–µ–±—è 3 –∂–∏–∑–Ω–∏ üíö")
    send_next_question(message.chat.id, user_id)

def send_next_question(chat_id, user_id):
    data = user_data[user_id]

    if data["lives"] <= 0:
        bot.send_message(chat_id, f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –°—Ç—Ä–∞–π–∫: {data['strike']}")
        return

    available_questions = [q for q in questions if q["question"] not in data["answered"]]
    if not available_questions:
        bot.send_message(chat_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –°—Ç—Ä–∞–π–∫: {data['strike']}")
        return

    question = random.choice(available_questions)
    data["current_question"] = question
    data["answered"].append(question["question"])

    bot.send_message(chat_id, f"üß† {question['question']}", reply_markup=gen_markup(question))

@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call):
    user_id = call.from_user.id
    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /victorina")
        return

    data = user_data[user_id]
    question = data["current_question"]

    if not question:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
        return

    selected = call.data
    if selected == question["answer"]:
        data["strike"] += 1
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        data["lives"] -= 1
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –∂–∏–∑–Ω–µ–π: {data['lives']}")

    send_next_question(call.message.chat.id, user_id)

bot.polling()
